/*
https://leetcode.com/problems/merge-sorted-array/description

88. Merge Sorted Array

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?
*/


//================================================================================================//
//================================================================================================//
//My solution, 0ms, beats 100%
//approach:
//Since insertion (using assignment operator) is much faster than insertion by shifting elements and inserting a new element in between
//It would be faster to approach the lists from the end
//this would achieve O(m+n), and avoid unnecessary shifting

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if (n == 0) return; // Nothing to merge
        if (m == 0) {
            for (int i = 0; i < n; i++) {
                nums1[i] = nums2[i]; // Copy nums2 into nums1
            }
            return;
        }

        int list1ptr = m - 1; // Points to the last non-zero element in nums1
        int list2ptr = n - 1; // Points to the last element in nums2
        int mergedPtr = m + n - 1; // Points to the last element in nums1

        while (list1ptr >= 0 && list2ptr >= 0) {
            if (nums1[list1ptr] > nums2[list2ptr]) {
                nums1[mergedPtr] = nums1[list1ptr];
                list1ptr--;
            } else {
                nums1[mergedPtr] = nums2[list2ptr];
                list2ptr--;
            }
            mergedPtr--; 
        }

        // If nums2 still has remaining elements
        while (list2ptr >= 0) {
            nums1[mergedPtr] = nums2[list2ptr];
            list2ptr--;
            mergedPtr--;
        }
    }
};
