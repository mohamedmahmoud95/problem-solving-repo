
/*
https://leetcode.com/problems/valid-parentheses/description/

20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 
Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
*/

//===============================================================================================================//
//===============================================================================================================//
//My solution, 0ms, beats 100%

class Solution {
public:
    bool isValid(string s) {
        unordered_map<char, char> bracketPairs = {
            {')', '('},
            {']', '['},
            {'}', '{'},
        };
        stack <char> stack;
        for (char c : s)
        {
            if (bracketPairs.count(c)) //if it's a closing bracket
            {
                //if the corresponding opening bracket is at the top of stack
                if (!stack.empty() && stack.top() == bracketPairs[c])
                {
                    //valid pair, pop and move on
                    stack.pop();
                }
                else
                {
                    return false; //no match, invalid pair
                }
            }
            else
            {
                stack.push(c);
            }
        }
        // Stack should be empty if all brackets are matched
        return stack.empty();
        
    }
};
