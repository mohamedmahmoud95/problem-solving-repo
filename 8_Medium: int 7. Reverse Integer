/*
https://leetcode.com/problems/reverse-integer/description/
7. Reverse Integer (Medium)
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

 Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
  

 Example 1:

 Input: x = 123
 Output: 321
 Example 2:

 Input: x = -123
 Output: -321
 Example 3:

 Input: x = 120
 Output: 21
  

 Constraints:

 -231 <= x <= 231 - 1
 */

/*
 This is how I thought of solving it
 we want to reverse the numbers, so, get the right most to the left most, and repeat for all.
 we can do so by getting the remainder by 10
 example:
 create a new variable to hold the reversed int
 remainder = 123%10 = 3
 then, multiply the reversed by 10, and add to it the remainder
 and so on until x==0;
 voila..
 */


//============================================================================================//
//============================================================================================//
 //My solution (beats 100%, 0ms)
 class Solution {
 public:
    int reverse(int x) {
        int remainder = 0;
        int reversed=0;
        while (x != 0)
        {
            remainder = x%10;
            x=x/10;
            if (reversed > 214748364 || (reversed == 214748364 && remainder > 7)) {
                return 0; // Positive overflow
            }
            if (reversed < -214748364 || (reversed == -214748364 && remainder < -8)) {
                return 0; // Negative overflow
            }
            
            reversed = reversed*10 + remainder;
        }
        return reversed;
    }
};
