/*
https://leetcode.com/problems/longest-consecutive-sequence/

128. Longest Consecutive Sequence

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
*/



//=========================================================================================================//
//=========================================================================================================//
//first solution, passed 76/79 then time limit exceeded 0n the 77th
//scroll down for a better solution

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> numSet(nums.begin(), nums.end());
        int longestStreak = 0;
        
        for (int num : nums) {
            // Check if it's the start of a sequence
            if (numSet.find(num - 1) == numSet.end()) {
                int currentNum = num;
                int currentStreak = 1;
                
                while (numSet.find(currentNum + 1) != numSet.end()) {
                    currentNum += 1;
                    currentStreak += 1;
                }
                
                longestStreak = max(longestStreak, currentStreak);
            }
        }
        
        return longestStreak;
    }
};



//=========================================================================================================//
//=========================================================================================================//
//2nd solution, 81ms, beats 48%
//scroll down for a better solution

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> numSet(nums.begin(), nums.end());
        int longestStreak = 0;

        for (int num : numSet) {
            // Only start if it's the beginning of a sequence
            if (numSet.find(num - 1) == numSet.end()) {
                int currentNum = num;
                int currentStreak = 1;

                // Count consecutive numbers
                while (numSet.find(currentNum + 1) != numSet.end()) {
                    currentNum += 1;
                    currentStreak += 1;
                }

                longestStreak = max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
    }
};

//=========================================================================================================//
//=========================================================================================================//
//3rd solution, 19ms, beats 79%

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size() <= 1) return nums.size();
        sort(nums.begin(),nums.end());
        int max_length = 1;
        int count=1;
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i] == nums[i-1]) continue;
            if(nums[i] - 1 == nums[i-1])
            {
                count++;
            }
            else
            {
                if(count > max_length) max_length = count;
                count = 1;
            }
        }
        if(count > max_length) max_length = count;
        return max_length;
    }
};
