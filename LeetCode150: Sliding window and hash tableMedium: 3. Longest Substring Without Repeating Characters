
/*
https://leetcode.com/problems/longest-substring-without-repeating-characters

3. Longest Substring Without Repeating Characters

Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
*/

//==================================================================================//
//==================================================================================//
//My solution, 15ms, beats44%

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int length = s.length();
        if (length<2) return length;
        int maxLength = 0;
        unordered_set<char> unrepeatedCharSet;
        int left = 0, right = 0;
       while(right < length)
       {
        while(unrepeatedCharSet.find(s[right])!= unrepeatedCharSet.end())
        {
            unrepeatedCharSet.erase(s[left]);
            left++;
        }
        unrepeatedCharSet.insert(s[right]);
        maxLength= max(maxLength, right-left+1);
        right++;
       }
       return maxLength;
    }
};

//==================================================================================//
//==================================================================================//
//chatGPT's solution, 6ms, beats72%


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int maxLength = 0;
        unordered_map<char, int> charIndex;
        int left = 0;

        for (int right = 0; right < s.size(); ++right) {
            if (charIndex.find(s[right]) != charIndex.end() && charIndex[s[right]] >= left) {
                left = charIndex[s[right]] + 1; // Move left to the position after the last occurrence
            }
            charIndex[s[right]] = right; // Update the index of the current character
            maxLength = max(maxLength, right - left + 1);
        }

        return maxLength;
    }
};
