/*
https://leetcode.com/problems/reverse-linked-list-ii/description

92. Reverse Linked List II

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 
Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

Follow up: Could you do it in one pass?

*/


//=================================================================================================//
//=================================================================================================//
//My solution, 0ms, beats 100%

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (!head || left == right) return head;

        ListNode* dummy = new ListNode(0, head); // New head of the list
        ListNode* prev = dummy;

        // Traverse to the node before the `left`-th position
        for (int i = 1; i < left; i++) {
            prev = prev->next;
        }

        ListNode* current = prev->next;  // Node at position `left`
        ListNode* next = nullptr;
        ListNode* reversedPrev = nullptr;

        for (int i = 0; i < right - left + 1; i++) {
            next = current->next;         // Store the next node
            current->next = reversedPrev; // Reverse the link
            reversedPrev = current;       // Move the reversedPrev pointer
            current = next;               // Move the current pointer
        }

        prev->next->next = current; // Connect the tail of the reversed part
        prev->next = reversedPrev;  // Connect the head of the reversed part

        return dummy->next; // Return the new head of the list
    }
};
