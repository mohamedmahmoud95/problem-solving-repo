/*
https://leetcode.com/problems/maximum-average-subarray-i/description
Sliding window pb

643. Maximum Average Subarray I

You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

 

Example 1:

Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75
Example 2:

Input: nums = [5], k = 1
Output: 5.00000
 

Constraints:

n == nums.length
1 <= k <= n <= 105
-104 <= nums[i] <= 104

*/



//========================================================================//
//========================================================================//


//My solution, 0ms, beats 100% الحمد لله

class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
         int n = nums.size();
        int sum = 0;

        // Calculate the initial sum of the first `k` elements
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }

        double max_avg = sum / double(k);

        // Slide the window over the rest of the array
        for (int i = k; i < n; i++) {
            sum = sum - nums[i - k] + nums[i]; // Slide the window
            double avg = sum / double(k);  
            max_avg = max(max_avg, avg);  
        }

        return max_avg;
    }
};
