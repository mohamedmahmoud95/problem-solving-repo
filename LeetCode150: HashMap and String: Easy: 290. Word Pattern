
/*
https://leetcode.com/problems/word-pattern/description
290. Word Pattern
Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:

Each letter in pattern maps to exactly one unique word in s.
Each unique word in s maps to exactly one letter in pattern.
No two letters map to the same word, and no two words map to the same letter.
 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"

Output: true

Explanation:

The bijection can be established as:

'a' maps to "dog".
'b' maps to "cat".
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"

Output: false

Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"

Output: false

 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.
*/

//===============================================================================================================//
//===============================================================================================================//
//0ms solution, beats 100%

class Solution {
public:
    bool wordPattern(string pattern, string s) {
        istringstream stream(s);
        vector<string> words;
        string word;
        
        // Split the string s into words.
        while (stream >> word) {
            words.push_back(word);
        }

        
        if (words.size() != pattern.size()) {
            return false;
        }

        unordered_map<char, string> patternToWord;
        unordered_map<string, char> wordToPattern;

        for (int i = 0; i < pattern.size(); i++) {
            char pat = pattern[i];
            string currentWord = words[i];
            
            if (patternToWord.find(pat) != patternToWord.end()) {
                if (patternToWord[pat] != currentWord) {
                    return false;  
                }
            } else {
                patternToWord[pat] = currentWord;
            }

            if (wordToPattern.find(currentWord) != wordToPattern.end()) {
                if (wordToPattern[currentWord] != pat) {
                    return false;  
                }
            } else {
                wordToPattern[currentWord] = pat;
            }
        }

        return true;
    }
};
