/*
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description

121. Best Time to Buy and Sell Stock

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104
*/

//============================================================================================================//
//============================================================================================================//
//My first solution, not the best solution at all, passed 153/212 test cases, scroll down for a better solution

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int length = prices.size();
        if (length <=1) return 0;
        int min_price_index = 0;
        int min_price = prices[0];
        for (int i = 0 ; i < length; i++)
        {
            if(prices[i] < min_price) {
                min_price = prices[i];
                min_price_index = i;
            }
        }
        if(min_price_index == length -1) return 0;
        int max_price = min_price;
        for (int i = min_price_index + 1; i < length ; i++){
            if (prices[i] > max_price){
                max_price = prices[i];
            }
        }
        return max_price - min_price;        
    }
};

//============================================================================================================//
//============================================================================================================//
//Better solution, 0ms, beats 100%

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int length = prices.size();
        if (length <=1) return 0;
        int min_price = prices[0];
        int profit = 0;
        for (int i = 0 ; i < length; i++)
        {
            if(prices[i] < min_price) {
                min_price = prices[i];
            }
            else{
            profit = max(profit, prices[i] - min_price);
            }
        }
        return profit;
    }
};

