

/*
https://leetcode.com/problems/majority-element/submissions/1471690964/?envType=study-plan-v2&envId=top-interview-150
LeetCode150
169. Majority Element

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?
*/

//==========================================================================//
//==========================================================================//
//My solution, 0ms, beats 100%

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        unordered_map<int,int> hash_map;
        int res = 0;
        int majority = 0;
        for (int n : nums){
            hash_map[n] = 1+ hash_map[n];
            if(hash_map[n] > majority) {
                majority = hash_map[n];
                res = n;
            }
        }
        return res;
    }
};


