/*
https://leetcode.com/problems/single-number/description/?envType=study-plan-v2&envId=leetcode-75

136. Single Number

136. Single Number

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.
*/


//==========================================================================//
//==========================================================================//
//My solution, 7ms, beats 22.5%, scroll down for a better solution
//
TC: O(N)
SC: O(N)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map <int, int> freq;
        for (int n : nums){
                freq[n]++;
        }
        for(auto &pair : freq)
        {
            if(pair.second == 1) return pair.first;
        }
        return -1;
    }
};
//==========================================================================//
//==========================================================================//
//Better solution using bitwise operation XOR:
//consider A,B bits, and Y as there XOR result:
A B Y
0 0 0
0 1 1
1 0 1
1 1 0
hence, 
A^A=0
A^B^A=B
(A^A^B) = (B^A^A) = (A^B^A) = B This shows that position doesn't matter.
Similarly , if we see , a^a^a......... (even times)=0 and a^a^a........(odd times)=a

and since it's givin that the numbers will only be present once or twice, using XOR should work
here is my solution using XOR, 0ms, beats 100%
TC: O(N)
SC: O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int result = 0;

        for (auto num : nums) {
            result ^= num;
        }

        return result;
    }
};
