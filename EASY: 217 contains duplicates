
/*
 https://leetcode.com/problems/contains-duplicate/description/
 217. Contains Duplicate
 Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.


 Example 1:

 Input: nums = [1,2,3,1]

 Output: true

 Explanation:

 The element 1 occurs at the indices 0 and 3.

 Example 2:

 Input: nums = [1,2,3,4]

 Output: false

 Explanation:

 All elements are distinct.

 Example 3:

 Input: nums = [1,1,1,3,3,4,3,2,4,2]

 Output: true

  
 Constraints:

 1 <= nums.length <= 105
 -109 <= nums[i] <= 109
 */


//============================================================================================//
//============================================================================================//
//My first solution was a brute force solution (2 nested for loops), 70/76 test cases passed, 
//test case 71 exceeded the time limit

//My 2nd solution is the following, 67ms, 73mb

#include <iostream>
#include <set>
using namespace std;

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        if (nums.size() < 2)
        {
            return false;
        }
        
        set<int> unique_nums;
        
        for(int i = 0 ; i < nums.size() ; i++)
        {
            if (unique_nums.contains(nums[i]))
            {
                return true;
            }
            unique_nums.insert(nums[i]);
        }
        
        return false;
    }
};


//============================================================================================//
//============================================================================================//
//3rd better solution: (27ms)

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
           if (nums.size() < 2)
        {
            return false;
        }
        
        if(nums.size() == 2)
            return nums[0] == nums[1];
        
        sort(nums.begin(), nums.end());
        for (int i = 0 ; i < nums.size()-1; i++)
        {
            if(nums[i] == nums[i+1])
            {
                return true;
            }
        }
        
        return false;
    
    }
};
