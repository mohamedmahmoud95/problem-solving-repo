/*
https://leetcode.com/problems/sqrtx/description/

69. Sqrt(x)

Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
 
Example 1:

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
 

Constraints:

0 <= x <= 231 - 1
*/

//========================================================================================//
//========================================================================================//
//Binary search solution, 0ms, beats 100%

//approach: perform a binary search between 0 and x to find the largest integer mid such that mid * mid is less than or equal to x.

class Solution {
public:
    int mySqrt(int x) {
        if (x < 2) {
            return x; 
        }

        int left = 0, right = x;
        while (left <= right) {
            int mid = left + (right - left) / 2; 
            if (mid == x / mid) { // if mid * mid == x (using division to avoid overflow)
                return mid;
            } else if (mid < x / mid) { //  if mid * mid < x
                left = mid + 1;
            } else {
                right = mid - 1; 
            }
        }

        return right; // return the largest integer whose square is <= x
    }
};
