/*
https://leetcode.com/problems/move-zeroes/description/?envType=study-plan-v2&envId=leetcode-75
283. Move Zeroes

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.


Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 

Follow up: Could you minimize the total number of operations done?
*/


//====================================================================================//
//====================================================================================//
//My first solution:

class Solution {
public:

    void moveZeroes(vector<int>& nums) {
        int end = nums.size()-1;
        for (int i = 0 ; i < end ; i++)
        {
            while (nums[i] == 0 && end < nums.size()){
                int j = i;
                for ( ; j < end ; j++)
                {
                    nums[j] = nums[j+1];
                }
                nums[j] = 0;
                end--;
            }
        }
    }
  
};


//====================================================================================//
//====================================================================================//
//My 2nd a better solution:

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int left = 0;
        for (int right = 0 ; right < nums.size() ; right++)
        {
               if(nums[right] != 0)
               {
                swap(nums[right], nums[left]); //move the non-zero elements to the begining of the list
                left++;
               }          
        }
    }
};
