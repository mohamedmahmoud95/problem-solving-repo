/*
https://leetcode.com/problems/powx-n/description/

50. Pow(x, n)

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104
*/

//==================================================================================================//
//==================================================================================================//
//Approach:
/*
Instead of multiplying x n times (which would take O(n) time), we can use the following strategy:
	1.	If n is even →  x^n = (x^{n/2}) \times (x^{n/2}) 
	2.	If n is odd →  x^n = x \times x^{n-1} 
	3.	If n is negative →  x^n = 1 / x^{-n} 
    This way, we divide the problem into smaller subproblems, reducing the number of multiplications significantly.
*/

//======================================//
//1- Iterative implementation, 0ms, beats 100%
//		Time Complexity:  O(log n) 
//		Space Complexity:  O(1) 

class Solution {
public:
    double myPow(double x, int n) {
        long long power = abs((long long)n); // Convert to long long to handle INT_MIN
        double result = 1.0;
        
        while (power > 0) {
            if (power % 2 == 1) {  // If odd, multiply result by x
                result *= x;
            }
            x *= x; // Square x
            power /= 2; // Reduce power by half
        }

        return (n < 0) ? 1 / result : result;
    }
};

//======================================//
//2- Recursive implementation, 0ms, beats 100%
//		Time Complexity:  O(log n) 
//		Space Complexity:  O(1) one extra space 


class Solution {
public:
    double myPow(double x, int n) {
        long long N = n; // Convert n to long long to prevent overflow
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        return fastPow(x, N);
    }

private:
    double fastPow(double x, long long n) {
        if (n == 0) return 1.0;
        double half = fastPow(x, n / 2);
        return (n % 2 == 0) ? half * half : half * half * x;
    }
};
