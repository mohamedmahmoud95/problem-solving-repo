/*

61. Rotate List

Given the head of a linked list, rotate the list to the right by k places.

Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

*/

//===========================================================================================//
//===========================================================================================//
//0ms solution, beats 100%

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (!head || !head->next || k == 0) return head; // Handle edge cases

        // Compute the length of the list
        int length = 1; // Start counting from the head
        ListNode* tail = head;
        while (tail->next != NULL) {
            tail = tail->next;
            length++;
        }

        // Optimize k
        k = k % length;
        if (k == 0) return head; // No rotation needed

        // Find the new head
        int stepsToNewHead = length - k;
        ListNode* newTail = head;
        for (int i = 1; i < stepsToNewHead; i++) {
            newTail = newTail->next;
        }

        // Update pointers
        ListNode* newHead = newTail->next;
        newTail->next = nullptr; 
        tail->next = head; 

        return newHead;
    }
};
