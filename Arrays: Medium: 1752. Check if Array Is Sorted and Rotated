



/*
https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/description/

1752. Check if Array Is Sorted and Rotated

Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.

There may be duplicates in the original array.

Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

Example 1:

Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].
Example 2:

Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.
Example 3:

Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

*/

//================================================================================================================================//
//================================================================================================================================//
//0ms, beats 100%


/*

      If the array is rotated, there should be at most one place where nums[i] > nums[i+1] (which is where the rotation happens).
      since the array might be rotated, we need to compare the last element (nums[n-1]) with the first element (nums[0]).
	    the modulo operator wraps around to ensure we do not go out of bounds.
	    if i = n-1 (last index), then (i + 1) % n = 0, meaning we compare nums[n-1] with nums[0].
*/


class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        int n = nums.size();
        int countBreaks = 0;

        for (int i = 0; i < n; i++) {
      
            if (nums[i] > nums[(i + 1) % n]) {
                countBreaks++;
            }
            if (countBreaks > 1) return false; 
        }

        return true;
    }
};
*/
