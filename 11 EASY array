
/*
 https://leetcode.com/problems/can-place-flowers/description/
 
 605. Can Place Flowers
 Easy

 You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

 Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

  

 Example 1:

 Input: flowerbed = [1,0,0,0,1], n = 1
 Output: true
 Example 2:

 Input: flowerbed = [1,0,0,0,1], n = 2
 Output: false
  

 Constraints:

 1 <= flowerbed.length <= 2 * 104
 flowerbed[i] is 0 or 1.
 There are no two adjacent flowers in flowerbed.
 0 <= n <= flowerbed.length
 */

//========================================================================================================//
//========================================================================================================//


//My first solution, not so organize, but passes 130/130 test cases, 0ms, beats 100%
//scroll down for a more organized solution

class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
            if (n<1) return true;
            if (flowerbed.size() < 1) return false;
            if (flowerbed.size()  == 1 && flowerbed[0] == 0 && n==1) return true;
            if (n >= flowerbed.size()) return false;

            if (flowerbed.size() ==2)
            {
                if (n == 1 && flowerbed[0] == 0 && flowerbed[1] == 0) return true;
                else return false;
            }
   
            if (flowerbed[0] == 0 && flowerbed[1]==0) n--;
            if (flowerbed[flowerbed.size()-1] == 0 && flowerbed[flowerbed.size()-2] == 0) n--;
            if (n <= 0) return true;
        for (int i = 2 ; i < flowerbed.size()-2 ; i++)
        {
            if (flowerbed[i] == 1) continue;
            if (((flowerbed [i+1] ==0 ) && (flowerbed [i-1] == 0) ) )
            {
                n--;
                if (n <= 0) return true;
                i+=1;
            }
        }
        return false;
    }
};








//========================================================================================================//
//========================================================================================================//




//My second solution, a bit more organized, 0ms, beats 100%
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        if (n<1) return true;
        int size = flowerbed.size();

        for (int i = 0; i < size; ++i) {
            if (flowerbed[i] == 0) {
                bool left_empty = (i == 0 || flowerbed[i - 1] == 0);  // Left plot is empty or we're at the start
                bool right_empty = (i == size - 1 || flowerbed[i + 1] == 0);  // Right plot is empty or we're at the end

                // If both adjacent plots (or lack thereof) are empty, we can plant a flower
                if (left_empty && right_empty) {
                    n--;

                    if (n<1) return true;
                    i++;
                }
            }
        }

        return false; 
        
    }
};
