/*
https://leetcode.com/problems/minimum-window-substring/description

76. Minimum Window Substring

Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?


*/




//============================================================================================//
//============================================================================================//
//first solution, 5ms, beats 70%

class Solution {
public:
    string minWindow(string s, string t) {
        if (t.size() > s.size()) return "";

        unordered_map<char, int> t_freq;
        for (char c : t) t_freq[c]++;

        unordered_map<char, int> window_freq;
        int left = 0, right = 0, min_len = INT_MAX, start = 0;
        int required = t_freq.size(); 
        int formed = 0;                

        while (right < s.size()) {
            char c = s[right];
            window_freq[c]++;

            if (t_freq.count(c) && window_freq[c] == t_freq[c]) {
                formed++;
            }

            while (formed == required) {
                // Update result if the current window is smaller
                if (right - left + 1 < min_len) {
                    min_len = right - left + 1;
                    start = left;
                }

                char left_char = s[left];
                window_freq[left_char]--;
                if (t_freq.count(left_char) && window_freq[left_char] < t_freq[left_char]) {
                    formed--;
                }
                left++;
            }
            right++;
        }

        return min_len == INT_MAX ? "" : s.substr(start, min_len);
    }
};
