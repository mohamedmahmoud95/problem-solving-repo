/*
 https://leetcode.com/problems/greatest-common-divisor-of-strings/description/
 1071. Greatest Common Divisor of Strings
 Easy

 For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).

 Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

  

 Example 1:

 Input: str1 = "ABCABC", str2 = "ABC"
 Output: "ABC"
 Example 2:

 Input: str1 = "ABABAB", str2 = "ABAB"
 Output: "AB"
 Example 3:

 Input: str1 = "LEET", str2 = "CODE"
 Output: ""
  

 Constraints:

 1 <= str1.length, str2.length <= 1000
 str1 and str2 consist of English uppercase letters.
 */


//============================================================================================//
//============================================================================================//
//My first solution (scroll down for a much better solution):

//
//#include <iostream>
//using namespace std;
//
//class Solution {
//public:
//    string gcdOfStrings(string str1, string str2) {
//        int str1_length = str1.length();
//        int str2_length = str2.length();
//        if(str1_length <1 || str2_length <1)
//            return "";
//        
//        for (int i = 0 ; i < str1_length && i < str2_length ; i++)
//        {
//            string common_substring;
//            while(str1[i] == str2[i] && i < str2_length)
//            {
//                common_substring.push_back(str1[i]);
//                i++;
//            }
//            cout<<common_substring<<endl;
//            string common_substring_with_no_duplicates;
//            for (int i = 0 ; i < common_substring.length() ; i++)
//            {
//                int middle_index = common_substring.length()/2 +i;
//                
//                
//            }
//            return common_substring;
//        }
//        return "";
//    }
//};
//
//int main(int argc, const char * argv[]) {
//    string str1 = "ABCABCABC";
//    string str2 = "ABC";
//    Solution solution;
//    solution.gcdOfStrings( str1,  str2);
//    
//    return 0;
//}



//============================================================================================//
//============================================================================================//
//My second solution, 0ms

#include <iostream>
using namespace std;

class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        int str1_length = str1.length();
        int str2_length = str2.length();
        string subString;
        
        //if they are both of length 1, they should be equal to have a gcd
        if(str1_length <1 || str2_length <1)
        {
            if (str1[0] == str2[0]){
                subString.push_back(str1[0]);
                return subString;
            }
            else
            {
                return "";
            }
        }
        
        
        //A string t divides another string s if and only if s can be constructed by repeating t one or more times.
        //thus, they should be equal to each otheres, or at least the smallest one of them should be equal to substring (of the same size) of the other one
        for(int i = 0 ; i < min(str1_length,str2_length) ; i++)
        {
            if (str1[i] != str2[i])
            {
                return "";
            }
        }
        
        //now, let's get the common substring betweeen both
        //take the first char of any
        //push back until you find a char that's equal to the first char of the stored common substring
        subString.push_back(str2[0]);
        for (int i = 1 ; i < str2_length ; i++)
        {
            if (str2[0] == str2[i])
            {
                break;
            }
            subString.push_back(str2[i]);
        }
        
        //now we know for sure that subString is the common substring
        //what's left is to make sure that str1 only consists of a set of concatinated substring
        
        int subString_length = subString.length();
        for (int i = 0 ; i < str1_length  ; )
        {
            for (int j = 0 ; j < subString_length ; j++, i++)
            if (str1[i] != subString[j])
            {
                return "";
            }
        }
        return subString;
    }
};

int main(int argc, const char * argv[]) {
    string str1 = "ABCABCABCDEF";
    string str2 = "ABCABC";
    Solution solution;
    cout<<solution.gcdOfStrings( str1,  str2);
    
    return 0;
}


