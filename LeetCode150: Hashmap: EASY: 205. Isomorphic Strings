/*
https://leetcode.com/problems/isomorphic-strings/description/

205. Isomorphic Strings

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
 

Example 1:

Input: s = "egg", t = "add"

Output: true

Explanation:

The strings s and t can be made identical by:

Mapping 'e' to 'a'.
Mapping 'g' to 'd'.
Example 2:

Input: s = "foo", t = "bar"

Output: false

Explanation:

The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'.

Example 3:

Input: s = "paper", t = "title"

Output: true


Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.
*/



//==============================================================================//
//==============================================================================//
//My solution, 0ms, beats 100% ()
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if (s.length() != t.length()) return false;
        unordered_map<char, char> sToT;
        unordered_map<char, char> tToS;
        for (int i = 0 ; i < s.length() ; ++i)
        {
            char sChar = s[i];
            char tChar = t[i];

            if(sToT.count(sChar) && sToT[sChar] != tChar) return false; //if it already exists && does not match the corresponding char in the other word
            if(tToS.count(tChar) && tToS[tChar] != sChar) return false;
            sToT[sChar] = tChar;
            tToS[tChar] = sChar;
        }
        return true;
    }
};
