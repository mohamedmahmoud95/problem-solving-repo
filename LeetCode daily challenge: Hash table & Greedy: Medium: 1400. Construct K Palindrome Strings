
/*

https://leetcode.com/problems/construct-k-palindrome-strings/description
1400. Construct K Palindrome Strings

Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.

 

Example 1:

Input: s = "annabelle", k = 2
Output: true
Explanation: You can construct two palindromes using all characters in s.
Some possible constructions "anna" + "elble", "anbna" + "elle", "anellena" + "b"
Example 2:

Input: s = "leetcode", k = 3
Output: false
Explanation: It is impossible to construct 3 palindromes using all the characters of s.
Example 3:

Input: s = "true", k = 4
Output: true
Explanation: The only possible solution is to put each character in a separate string.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
1 <= k <= 105

*/



//===================================================================================//
//===================================================================================//
//My solution, 7ms, beats 51%, scroll down for  more optimized solution:

class Solution {
public:
    bool canConstruct(string s, int k) {
        int size = s.length();
        
        if (size < k) return false;
        
        unordered_map<char, int> freq;
        for (char c : s) {
            freq[c]++;
        }
        
        // Count the number of characters with odd frequencies
        int numberOfOddFreq = 0;
        for (auto& pair : freq) {
            if (pair.second % 2 != 0) {
                numberOfOddFreq++;
            }
        }
        
        // If the number of odd frequencies is <= k, it's possible to form k palindromes
        return numberOfOddFreq <= k;
    }
};

//	•	Time Complexity: O(n)
//	•	Space Complexity: O(1)




//===================================================================================//
//===================================================================================//
//chatGPT's soltuion, 0ms, beats 100%

class Solution {
public:
    bool canConstruct(string s, int k) {
        int size = s.length();
        
        // If there are fewer characters than required palindromes, it's impossible
        if (size < k) return false;
        
        // Frequency array for 26 lowercase English letters
        int freq[26] = {0};
        
        // Count character frequencies
        for (char c : s) {
            freq[c - 'a']++;
        }
        
        // Count the number of odd frequencies
        int numberOfOddFreq = 0;
        for (int i = 0; i < 26; i++) {
            if (freq[i] % 2 != 0) {
                numberOfOddFreq++;
            }
        }
        
        // If the number of odd frequencies is <= k, it's possible to form k palindromes
        return numberOfOddFreq <= k;
    }
};

//	•	Time Complexity: O(n + 26) = O(n)
//	•	Space Complexity: O(1).
