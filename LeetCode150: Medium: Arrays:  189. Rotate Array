/*
https://leetcode.com/problems/rotate-array/description
189. Rotate Array

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative. 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
 

Follow up:

Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?
*/

//================================================================================================//
//================================================================================================//
//My solution, 0ms, beats 100%
//approach:
//The first idea that pops in mind is to shift all elements right k times, bringing k elements from end to start of the array
//instead of shiffting all element (which will be very costly if the array size is large)
//let's:
// 1. Reverse the entire array to bring the last k elements to the front.
// 2. Reverse the first k elements to restore their original order.
// 3. Reverse the remaining (n-k) elements to restore their order.
//(If this solution is not clear try a couple of test cases on a paper and you'll find it actually more simple than the shifting approach)

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        if (k==0 || n<=1) return ;
        k%=n; //optimization step to handles cases where k >= nums.size(), ensuring unnecessary rotations are avoided.
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin()+k);
        reverse(nums.begin()+k, nums.end());      
    }
};
