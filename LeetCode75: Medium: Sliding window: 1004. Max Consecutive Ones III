/*
https://leetcode.com/problems/max-consecutive-ones-iii/description

1004. Max Consecutive Ones III

Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length
*/


//===================================================================================//
//===================================================================================//
//My solution
//there is a test case that it did not pass test case #40 
/*
nums = [0,0,0,1]
k = 4
Output: 3
Expected: 4

where k is >= the number of 0s
scroll down for another solution that handles this case
*/


class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int maxOnesCount = 0;
        int onesCount = 0; //current count
        int start = 0;
        int end = 0;
        int n = nums.size()-1;  
        int flipped = 0; //a counter to count flipped 0s
        while(end < n){
            if (nums[end] == 0)
            {
                flipped++;

            }

            while (flipped > k)
            {
                if (nums[start] == 0)
                {
                    flipped --;
                }
                start++;
            }

            end ++;

            onesCount = end - start;
            maxOnesCount = max(maxOnesCount, onesCount);
        }
        
     return maxOnesCount;
    }
};


//===================================================================================//
//===================================================================================//
//My second solution: 0ms, beats 100%

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int maxOnesCount = 0;
        int zeroCount = 0;
        int onesCount = 0;
        int right = 0;
        int left = 0;

        while (right < nums.size())
        {
            if (nums[right] == 0) zeroCount ++;
            
            while (zeroCount > k)
            {
                if(nums[left] == 0)
                {
                    zeroCount--;
                }
                left++;
            }
            right++;
            onesCount = right - left;
            maxOnesCount = max(maxOnesCount, onesCount);
        }
        
     return maxOnesCount;
    }
};
