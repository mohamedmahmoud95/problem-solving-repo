/*
 https://leetcode.com/problems/two-sum/description/
 1. Two Sum
 
 Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

 You may assume that each input would have exactly one solution, and you may not use the same element twice.

 You can return the answer in any order.

  

 Example 1:

 Input: nums = [2,7,11,15], target = 9
 Output: [0,1]
 Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
 Example 2:

 Input: nums = [3,2,4], target = 6
 Output: [1,2]
 Example 3:

 Input: nums = [3,3], target = 6
 Output: [0,1]
  

 Constraints:

 2 <= nums.length <= 104
 -109 <= nums[i] <= 109
 -109 <= target <= 109
 Only one valid answer exists.
  

 Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

 */



//========================================================================================================//
//========================================================================================================//


//My first solution, time complexity is very high, passes all test cases, 42ms, beats 25%
//scroll down for a better solution


class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //handle constraints 
        if (nums.size() < 2 )
            return {};
        int right = nums.size()-1;
       //if(target > 0){ while (nums[right] > target && right > 0) right --;}
        for (int i = 0 ; i < right ; i++)
        {
            for (int j = i+1 ; j <= right ; j++)
            {
                if ((nums[i] + nums[j]) == target)
                {
                    return {i,j};
                }
            }
        }
        return {};
    }
};





//========================================================================================================//
//========================================================================================================//

//The following solution is much better, but it only works if the list is sorted.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //handle constraints
        if (nums.size() < 2 )
            return {};
        int right = nums.size()-1;
        int left = 0;
        while (right > left){
            int sum =(nums[left]+ nums[right]);
            
            if ( sum > target)
            {
                right --;
            }
            else if (sum < target)
            {
                left++;
            }
            else return {left,right};
        }
        return {};
    }
        
};
